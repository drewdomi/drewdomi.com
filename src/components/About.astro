---
import * as m from "@/paraglide/messages";

import Button from "./Button.astro";
import SectionTitle from "./SectionTitle.astro";
---

<section class="text-center sm:text-left grid">
  <div id="title">
    <h1 class="font-medium text-[28px] font-title mb-1">{m.siteName}</h1>
    <h2 class="text-[18px]">{m.aboutSubtitle}</h2>
  </div>

  <div class="justify-self-center items-center" aria-hidden="true">
    <label for="avatar-logo" class="swap swap-flip" class="swap-off">
      <input id="avatar-logo" type="checkbox" />
      <div class="swap-off">
        <img
          class="rounded-full border-2 justify-self-center mt-5 shadow-md"
          width="100"
          height="100"
          src="https://github.com/drewdomi.png"
          alt={m.siteName()}
        />
      </div>
      <div class="swap-on">
        <img
          class="rounded-full border-2 justify-self-center mt-5 shadow-md"
          width="100"
          height="100"
          src="/favicon.svg"
          alt="Drew Logo"
        />
      </div>
    </label>
    <div class="flex justify-center items-center gap-1.5 mt-1">
      <span
        id="status-dot"
        class="w-3 h-3 rounded-full border-2 border-white bg-none"
        aria-hidden="true"></span>
      <span id="status-text" class="text-sm leading-none">Loading...</span>
    </div>
  </div>

  <article id="about" class="text-left">
    <SectionTitle title={m.aboutSectionTitle()} />

    <p class="text-[16px]">
      {m.aboutText}
    </p>
  </article>

  <div class="flex justify-center gap-8 sm:gap-6 mt-8 sm:m-0" id="btns">
    <Button
      label="GitHub"
      href="https://github.com/drewdomi"
      leftIcon="bi:github"
    />
    <Button
      label={m.aboutCvButton()}
      href={m.aboutCvLink()}
      leftIcon="ph:file-pdf-bold"
    />
  </div>
</section>

<style>
  @media (min-width: 640px) {
    section {
      grid-template-columns: 1fr 100px;
      grid-template-rows: 1fr 48x 1fr;
    }
    #title {
      align-self: center;
    }
    #about {
      grid-column: 1 / -1;
      grid-row: 3;
    }
    #btns {
      grid-row: 2;
      grid-column: 1 / -1;
      align-self: center;
      justify-content: start;
    }
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const DISCORD_ID = "***REMOVIDO***";
    const UPDATE_INTERVAL_MS = 15000;

    const STATUS_CONFIG = {
      online: { class: "bg-success", text: "Online" },
      idle: { class: "bg-warning", text: "Idle" },
      dnd: { class: "bg-error", text: "Busy" },
      offline: { class: "bg-gray-500", text: "Offline" },
    };

    const statusDot = document.getElementById("status-dot");
    const statusText = document.getElementById("status-text");

    const updateStatus = (status) => {
      const statusInfo = STATUS_CONFIG[status] || STATUS_CONFIG.offline;

      Object.values(STATUS_CONFIG).forEach((config) =>
        statusDot.classList.remove(config.class)
      );

      statusDot.classList.add(statusInfo.class);
      statusText.textContent = statusInfo.text;
    };

    const fetchStatus = async () => {
      try {
        const response = await fetch(
          `https://api.lanyard.rest/v1/users/${DISCORD_ID}`
        );
        const { data } = await response.json();
        updateStatus(data.discord_status);
      } catch (error) {
        console.error("Lanyard API Error:", error);
        updateStatus("offline");
      }
    };

    fetchStatus();
    const interval = setInterval(fetchStatus, UPDATE_INTERVAL_MS);

    window.addEventListener("unload", () => clearInterval(interval));
  });
</script>

---
import * as m from '@/paraglide/messages'
import { Picture } from 'astro:assets'
import ButtonLink from './ButtonLink.astro'
import SectionTitle from './SectionTitle.astro'

const statusMessages = {
  online: m.statusOnline(),
  offline: m.statusOffline(),
  idle: m.statusIdle(),
  dnd: m.statusDnd(),
}

const discordId = import.meta.env.DISCORD_ID || ('' as string)
---

<section class="text-center sm:text-left grid">
  <div id="title">
    <h1 class="font-medium text-[28px] font-title mb-1">{m.aboutName}</h1>
    <h2 class="text-[18px] mb-2">{m.aboutSubtitle}</h2>
  </div>

  <div
    class="justify-self-center items-center p-3"
    id="avatar"
  >
    <label
      for="avatar-flip"
      class="swap swap-flip animate-bump hover:animate-bump-paused"
      class="swap-off"
      aria-hidden="true"
    >
      <input
        id="avatar-flip"
        type="checkbox"
      />
      <div class="swap-off">
        <Picture
          class="rounded-full border-2 justify-self-center shadow-md w-[120px] h-[120px] md:w-[100px] md:h-[100px]"
          width={100}
          height={100}
          loading="eager"
          src="https://github.com/drewdomi.png"
          formats={['png', 'webp']}
          alt={m.aboutName()}
        />
      </div>
      <div
        class="swap-on"
        aria-hidden="true"
      >
        <Picture
          class="rounded-full border-2 justify-self-center shadow-md w-[120px] h-[120px] md:w-[100px] md:h-[100px]"
          width={100}
          height={100}
          src="/toothless.jpg"
          loading="eager"
          formats={['png', 'webp']}
          alt={m.aboutProfileAlt()}
        />
      </div>
    </label>
    <div class="flex justify-center items-center gap-1.5 mt-2">
      <span
        id="status-dot"
        class="w-3 h-3 rounded-full border-2 border-white bg-none animate-pulse"
        aria-hidden="true"
      ></span>
      <span
        id="status-text"
        class="text-sm leading-none cursor-default font-light"
        aria-hidden="false"
      >
        ----
      </span>
    </div>
  </div>

  <article
    id="about"
    class="text-left"
  >
    <SectionTitle title={m.aboutSectionTitle()} />

    <p class="text-[16px]">
      {m.aboutText}
    </p>
  </article>

  <ul
    class="flex justify-center gap-8 sm:gap-6 mt-8 sm:m-0"
    id="btns"
  >
    <li>
      <ButtonLink
        label="GitHub"
        href="https://github.com/drewdomi"
        leftIcon="bi:github"
      />
    </li>
    <li>
      <ButtonLink
        label={m.aboutCvButton()}
        href={m.aboutCvLink()}
        leftIcon="ph:file-pdf-bold"
      />
    </li>
  </ul>
</section>

<style>
  @media (min-width: 640px) {
    section {
      grid-template-columns: 1fr 100px;
      grid-template-rows: 1fr 48x 1fr;
    }
    #title {
      align-self: center;
    }

    #avatar {
      grid-row: 1 / 3;
    }

    #about {
      grid-column: 1 / 4;
      grid-row: 3;
    }
    #btns {
      grid-row: 2;
      grid-column: 1 / -1;
      align-self: center;
      justify-content: start;
    }
  }
</style>

<script is:inline define:vars={{ statusMessages, discordId }}>
  document.addEventListener('astro:page-load', () => {
    const UPDATE_INTERVAL_MS = 15000

    const STATUS_CONFIG = {
      online: { class: 'bg-success', text: () => statusMessages.online },
      idle: { class: 'bg-warning', text: () => statusMessages.idle },
      dnd: { class: 'bg-error', text: () => statusMessages.dnd },
      offline: { class: 'bg-gray-500', text: () => statusMessages.offline },
    }

    const statusDot = document.getElementById('status-dot')
    const statusText = document.getElementById('status-text')

    const updateStatus = status => {
      if (!statusDot || !statusText) return

      const statusInfo = STATUS_CONFIG[status] || STATUS_CONFIG.offline

      Object.values(STATUS_CONFIG).forEach(config =>
        statusDot.classList.remove(config.class),
      )

      statusDot.classList.add(statusInfo.class)
      statusText.textContent = statusInfo.text()
    }

    const fetchStatus = async () => {
      try {
        const response = await fetch(
          `https://api.lanyard.rest/v1/users/${discordId}`,
          { cache: 'no-cache' },
        )
        const { data } = await response.json()

        if (data.discord_status) updateStatus(data.discord_status)
      } catch (error) {
        updateStatus('offline')
      }
    }

    fetchStatus()
    const interval = setInterval(fetchStatus, UPDATE_INTERVAL_MS)
    window.addEventListener('unload', () => clearInterval(interval))
  })
</script>
